总结：所有的数据中一共包括12个变量，其中7个是数值变量，5个是属性变量

PassengerId(忽略)：这是乘客的编号，显然对乘客是否幸存完全没有任何作用，仅做区分作用，所以我们就不考虑它了。

Survived(目标值)：乘客最后的生存情况，这个是我们预测的目标变量。不过从平均数可以看出，最后存活的概率大概是38%。

Pclass(考虑)：社会经济地位，这个很明显和生存结果相关啊，有钱人住着更加高级船舱可能会享受着更加高级的服务，因此遇险时往往会受到优待。所以这显然是我们要考虑的一个变量。分为123等级，1等级获救率更高。

Name(考虑)：这个变量看起来好像是没什么用啊，因为毕竟从名字你也不能看出能不能获救，但是仔细观察数据我们可以看到，所有人的名字里都包括了Mr，Mrs和Miss，从中是不是隐约可以看出来一些性别和年龄的信息呢，所以干脆把名字这个变量变成一个状态变量，包含Mr，Mrs和Miss这三种状态，但是放到机器学习里面我们得给它一个编码啊，最直接的想法就是0,1,2，但是这样真的合理吗？因为从距离的角度来说，这样Mr和Mrs的距离要小于Mr和Miss的距离，显然不合适，因为我们把它看成平权的三个状态。

所以，敲黑板，知识点来了，对于这种状态变量我们通常采取的措施是one-hot编码，什么意思呢，有几种状态就用一个几位的编码来表示状态，每种状态对应一个一位是1其余各位是0的编码，这样从向量的角度来讲，就是n维空间的n个基准向量，它们相互明显是平权的，此例中，我们分别用100,010,001来表示Mr，Mrs和Miss。

Sex(考虑)：性别这个属性肯定是很重要的，毕竟全人类都讲究Lady First，所以遇到危险的时候，绅士们一定会先让女士逃走，因此女性的生存几率应该会大大提高。类似的，性别也是一个平权的状态变量，所以到时候我们同样采取one-hot编码的方式进行处理。

Age(考虑)：这个变量和性别类似，都是明显会发挥重要作用的，因为无论何时，尊老爱幼总是为人们所推崇，但年龄对是否会获救的影响主要体现在那个人处在哪个年龄段，因此我们选择将它划分成一个状态变量，比如18以下叫child，18以上50以下叫adult，50以上叫elder，然后利用one-hot编码进行处理。不过这里还有一个问题就是年龄的值只有714个，它不全！这么重要的东西怎么能不全呢，所以我们只能想办法补全它。

又敲黑板，知识点又来了，缺失值我们怎么处理呢？最简单的方法，有缺失值的样本我们就扔掉，这种做法比较适合在样本数量很多，缺失值样本舍弃也可以接受的情况下，这样虽然信息用的不充分，但也不会引入额外的误差。然后，假装走心的方法就是用平均值或者中位数来填充缺失值，这通常是最简便的做法，但通常会带来不少的误差。最后，比较负责任的方法就是利用其它的变量去估计缺失变量的值，这样通常会更靠谱一点，当然也不能完全这样说，毕竟只要是估计值就不可避免的带来误差，但心理上总会觉得这样更好……

SibSp（考虑）：船上兄弟姐妹或者配偶的数量。这个变量对最后的结果到底有什么影响我还真的说不准，但是预测年纪的时候说不定有用。

Parch（考虑）：船上父母或者孩子的数量。这个变量和上个变量类似，我确实没有想到特别好的应用它的办法，同样的，预测年龄时这个应该挺靠谱的。

Ticket（忽略）：船票的号码。恕我直言，这个谜一样的数字真的是不知道有什么鬼用，果断放弃了。

Fare（考虑）：船票价格，这个变量的作用其实类似于社会地位，船票价格越高，享受的服务越高档，所以遇难获救的概率肯定相对较高，所以这是一个必须要考虑进去的变量。

Cabin（忽略）：船舱号，这个变量或许透露出了一点船舱等级的信息，但是说实话，你的缺失值实在是太多了，我要是把它补全引入的误差感觉比它提供的信息还多，所以忍痛割爱，和你say goodbye！

Embarked（考虑）：登船地点，按道理来说，这个变量应该是没什么卵用的，但介于它是一个只有三个状态的状态变量，那我们就把它处理一下放进模型，万一有用呢对吧。另外，它有两个缺失值，这里我们就不大动干戈的去预测了，就直接把它定为登船人数最多的S吧。